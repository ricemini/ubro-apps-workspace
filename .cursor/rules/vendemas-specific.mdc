# VendeMás Product-Specific Rules

## 🎨 VendeMás Design System Guidelines

**IMPORTANT: Always follow the VendeMás Design System when working on VendeMás products**

The VendeMás product has a centralized design system located at `libs/vendemas-shared-styles/` that **MUST** be used for all styling decisions across:

- **vendemas-caja-mobile** (Angular POS system)
- **vendemas-negocio-web** (Angular Business Dashboard)
- **vendemas-landing-web** (Next.js marketing site)
- **Future mobile app** (React Native/Flutter)

**Design System Structure:**

```
vendemas-shared-styles/
├── foundation/          # Core design tokens, variables, mixins
├── themes/             # Material Design 3, light/dark themes
├── components/         # Shared UI components
├── commerce/           # Commerce-specific styles
├── vendor/             # Vendor management styles
├── location/           # Location and discovery styles
├── mobile/             # Mobile-first responsive patterns
├── accessibility/      # Accessibility and inclusive design
└── utilities/          # Helper classes and utilities
```

**Design System Rules:**

1. **NEVER use hardcoded colors, fonts, or spacing values** - Always use design tokens from the foundation layer
2. **ALWAYS import the design system** - Use `@use '@vendemas/shared-styles';` in your main stylesheets
3. **Use semantic mixins** - Leverage `@include heading(1)`, `@include flex-center`, `@include interactive` etc.
4. **Follow the layer organization** - Add new styles to the appropriate layer based on their purpose
5. **Maintain accessibility** - Use `@include focus-ring`, `@include reduced-motion`, `@include high-contrast`
6. **Mobile-first approach** - Write mobile styles first, then enhance with `@include tablet-up` and `@include desktop-up`

**When Adding New Styles:**

- **Foundation**: Add variables and mixins to `foundation/`
- **Components**: Add component styles to `components/`
- **Domain-specific**: Add to appropriate layer (`commerce/`, `vendor/`, `location/`, etc.)
- **Update index files**: Ensure new files are exported properly

**Design Tokens to Use:**

- Colors: `$vendemas-primary`, `$vendemas-secondary`, `$vendemas-surface`, etc.
- Typography: `$vendemas-font-family-body`, `$vendemas-font-size-lg`, etc.
- Spacing: `$vendemas-spacing-md`, `$vendemas-spacing-lg`, etc.
- Breakpoints: `@include mobile`, `@include tablet`, `@include desktop`

**Example Usage:**

```scss
// ✅ CORRECT - Using design system
@use '@vendemas/shared-styles';

.my-component {
  @include heading(2);
  @include flex-center;
  padding: $vendemas-spacing-lg;
  color: var(--vendemas-primary);
}

// ❌ WRONG - Hardcoded values
.my-component {
  font-size: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 24px;
  color: #4caf50;
}
```

**Remember:** The design system ensures consistency, maintainability, and accessibility across all VendeMás applications. Deviating from it creates inconsistencies and technical debt.

## 📝 Naming Convention: `<product-name>-<role>-<platform>`

**Role-Based Naming:**

- `caja` = Staff/POS operators (cashiers, sales staff)
- `admin` = Business owners and managers
- `website` = Marketing and public-facing content

**Platform Abbreviations:**

- `mobile` = Mobile applications (Ionic/Capacitor, React Native)
- `web` = Web applications (PWA, SSR, SPA)

**App Naming Pattern:**

```
vendemas-caja-mobile     # Staff mobile app (Ionic/Capacitor)
vendemas-negocio-web     # Business dashboard (Angular PWA)
vendemas-admin-web       # Admin web dashboard (Angular PWA)
vendemas-website         # Marketing website (Next.js SSR)
```

**Library Naming Pattern:**

```
vendemas-shared-types        # Shared TypeScript types
vendemas-shared-auth         # Authentication utilities
vendemas-shared-ui           # UI components
vendemas-shared-utils        # Utility functions
vendemas-shared-api          # API client utilities
vendemas-shared-constants    # Shared constants
```

**Directory Structure:**

```
apps/
├── vendemas-caja-mobile/    # Staff mobile app (Ionic/Capacitor)
├── vendemas-negocio-web/    # Business dashboard (Angular PWA)
├── vendemas-admin-web/      # Admin web dashboard (Angular PWA)
└── vendemas-website/        # Marketing website (Next.js SSR)
```

libs/
├── vendemas-shared-types/ # Shared TypeScript types
├── vendemas-shared-auth/ # Authentication utilities
├── vendemas-shared-ui/ # UI components
├── vendemas-shared-utils/ # Utility functions
├── vendemas-shared-api/ # API client utilities
└── vendemas-shared-constants/ # Shared constants
```

**Import Paths:**

```typescript
// Clean, descriptive imports
import { Product } from '@vendemas/shared-types';
import { AuthService } from '@vendemas/shared-auth';
import { Button } from '@vendemas/shared-ui';

// App-specific imports
import { CajaService } from '@vendemas/caja-mobile';
import { NegocioService } from '@vendemas/negocio-web';
import { AdminService } from '@vendemas/admin-web';
import { WebsiteService } from '@vendemas/website';
```

## 🚀 Vercel Deployment Configuration for vendemas-landing-web

**CRITICAL: Vercel Configuration Requirements for Nx Monorepo**

The `vendemas-landing-web` project requires specific Vercel configuration due to the Nx monorepo structure. **Always verify these settings when working on CI/CD or deployment issues:**

### Required Vercel Configuration (`apps/vendemas-landing-web/vercel.json`):

```json
{
  "version": 2,
  "framework": "nextjs",
  "buildCommand": "npx nx run vendemas-landing-web:build:production",
  "devCommand": "npx nx run vendemas-landing-web:serve",
  "installCommand": "pnpm install",
  "outputDirectory": "dist/vendemas-landing-web/.next",
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/next",
      "config": {
        "distDir": "dist/vendemas-landing-web/.next"
      }
    }
  ]
}
```

### Required Package.json Scripts (`apps/vendemas-landing-web/package.json`):

```json
{
  "scripts": {
    "build": "npx nx run vendemas-landing-web:build:production",
    "dev": "npx nx run vendemas-landing-web:serve",
    "start": "npx nx run vendemas-landing-web:serve:production",
    "lint": "npx nx run vendemas-landing-web:lint",
    "test": "npx nx run vendemas-landing-web:test"
  }
}
```

### Common Vercel Deployment Issues & Solutions:

1. **404 NOT_FOUND Error**: Usually caused by Vercel using cached configuration
   - **Solution**: Force redeployment with empty commit: `git commit --allow-empty -m "ci: force vercel redeployment"`
   - **Root Cause**: Vercel caches build settings and doesn't pick up `vercel.json` changes

2. **Build Command Not Found**: Vercel tries to run `pnpm build` instead of Nx commands
   - **Solution**: Ensure `buildCommand` is set to `npx nx run vendemas-landing-web:build:production`
   - **Root Cause**: Generic Next.js build commands don't work in Nx monorepos

3. **Output Directory Not Found**: Vercel can't find the built files
   - **Solution**: Set `outputDirectory` to `dist/vendemas-landing-web/.next`
   - **Root Cause**: Nx outputs to a different directory than standard Next.js

### Deployment Checklist:

- [ ] Verify `vercel.json` has correct Nx build commands
- [ ] Confirm `outputDirectory` points to `dist/vendemas-landing-web/.next`
- [ ] Check `package.json` has proper scripts for Vercel
- [ ] Test build locally: `npx nx run vendemas-landing-web:build`
- [ ] If 404 error persists, force redeployment with empty commit

### Force Redeployment Command:

```bash
git commit --allow-empty -m "ci: force vercel redeployment with updated config"
git push
```

**Remember**: Vercel caches configuration aggressively. When changing `vercel.json` or build settings, always force a redeployment to ensure changes are picked up.
