name: VendeMÃ¡s Landing Web CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'apps/vendemas-landing-web/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'nx.json'
      - '.github/workflows/vendemas-landing-web-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'apps/vendemas-landing-web/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'nx.json'
      - '.github/workflows/vendemas-landing-web-ci.yml'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

permissions:
  actions: read
  contents: read
  security-events: write
  pull-requests: write

jobs:
  # =============================================================================
  # SETUP & CACHE
  # =============================================================================
  setup:
    name: Setup & Cache
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.affected.outputs.affected }}
      affected-projects: ${{ steps.affected.outputs.projects }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Enable Nx Cloud for distributed task execution and caching
      # Uncomment after running "nx connect" and getting access token
      # - name: Start Nx Cloud CI run
      #   run: npx nx start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      - name: Set Nx affected projects
        id: affected
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: main

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: |
            .nx/cache
            .nx/workspace-data
          key: nx-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            nx-${{ runner.os }}-

  # =============================================================================
  # SECURITY SCAN
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.affected == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --fail-on=upgradable

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # =============================================================================
  # CODE QUALITY
  # =============================================================================
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.affected == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: npx nx affected --target=lint --parallel=3

      - name: Run Prettier check
        run: pnpm format:check

      - name: Run TypeScript check
        run: npx nx affected --target=typecheck --parallel=3

  # =============================================================================
  # UNIT TESTS
  # =============================================================================
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.affected == 'true'
    strategy:
      matrix:
        node-version: [20]
        os: [ubuntu-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: npx nx affected --target=test --parallel=3 --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # =============================================================================
  # E2E TESTS
  # =============================================================================
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.affected == 'true'
    strategy:
      matrix:
        shardIndex: [1, 2, 3]
        shardTotal: [3]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npx nx affected --target=e2e --parallel=3 --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.shardIndex }}
          path: playwright-report/
          retention-days: 30

  # =============================================================================
  # BUILD
  # =============================================================================
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [setup, lint, test, e2e]
    if: needs.setup.outputs.affected == 'true' && needs.lint.result == 'success' && needs.test.result == 'success' && needs.e2e.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: npx nx affected --target=build --parallel=3

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # =============================================================================
  # PERFORMANCE AUDIT
  # =============================================================================
  performance:
    name: Performance Audit
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun
          --config=./apps/vendemas-landing-web/.lighthouserc.json
          --upload.target=temporary-public-storage

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30

  # =============================================================================
  # DEPLOY TO VERCEL
  # =============================================================================
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: needs.build.result == 'success' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ env.VERCEL_TOKEN }}
          vercel-org-id: ${{ env.VERCEL_ORG_ID }}
          vercel-project-id: ${{ env.VERCEL_PROJECT_ID }}
          working-directory: ./apps/vendemas-landing-web
          vercel-args: '--prod'

      - name: Comment deployment URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ð **Deployment successful!**\n\n**Production URL:** ${{ steps.deploy.outputs.url }}\n\n**Preview URL:** ${{ steps.deploy.outputs.preview-url }}`
            })

  # =============================================================================
  # POST-DEPLOY VERIFICATION
  # =============================================================================
  post-deploy-verification:
    name: Post-Deploy Verification
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run smoke tests
        run: |
          npx playwright test \
            --config=./apps/vendemas-landing-web-e2e/playwright.config.ts \
            --grep="smoke" \
            --base-url=${{ needs.deploy.outputs.url }}

      - name: Health check
        run: |
          curl -f ${{ needs.deploy.outputs.url }}/api/health || exit 1

  # =============================================================================
  # SELF-HEALING CI
  # =============================================================================
  self-healing:
    name: Self-Healing CI
    runs-on: ubuntu-latest
    needs: [setup, lint, test, e2e, build, performance, deploy]
    if: always() && (needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.e2e.result == 'failure' || needs.build.result == 'failure' || needs.performance.result == 'failure')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Nx Cloud Self-Healing CI - AI-powered failure analysis and fixes
      - name: Run Nx Cloud Self-Healing CI
        run: npx nx-cloud fix-ci
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ env.NX_CLOUD_ACCESS_TOKEN }}

      - name: Comment on PR with fix status
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const hasFixComment = comments.some(comment =>
              comment.body.includes('ð¤ Nx Cloud Self-Healing CI')
            );

            if (!hasFixComment) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ð¤ **Nx Cloud Self-Healing CI**\n\nAI-powered failure analysis has been triggered. Check your editor (VS Code/Cursor) for notifications about available fixes, or visit the Nx Cloud dashboard for more details.\n\n**Failed Jobs:**\n${Object.entries(needs).filter(([key, value]) => key !== 'setup' && value.result === 'failure').map(([key]) => `- ${key}`).join('\n')}`
              });
            }
