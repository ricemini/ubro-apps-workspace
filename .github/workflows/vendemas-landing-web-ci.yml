name: Vendem√°s Landing Web CI/CD

on:
  push:
    branches: [main, develop, feature/ci-cd]
    paths:
      - 'apps/vendemas-landing-web/**'
      - 'libs/vendemas-shared-design/**'
      - 'libs/vendemas-shared-styles/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'nx.json'
      - '.github/workflows/vendemas-landing-web-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/vendemas-landing-web/**'
      - 'libs/vendemas-shared-design/**'
      - 'libs/vendemas-shared-styles/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'nx.json'
      - '.github/workflows/vendemas-landing-web-ci.yml'

env:
  NODE_VERSION: 20
  PNPM_VERSION: 8.15.0
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  # =============================================================================
  # SETUP & AFFECTED DETECTION
  # =============================================================================
  setup:
    name: Setup & Affected Detection
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.check-affected.outputs.affected }}
      projects: ${{ steps.check-affected.outputs.projects }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: |
            .nx/cache
            .nx/workspace-data
          key: nx-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Set Nx affected projects
        id: affected
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: main

      - name: Check if vendemas-landing-web is affected
        id: check-affected
        run: |
          # Debug: Check Nx version and available commands
          echo "üîç Debugging Nx setup..."
          pnpm nx --version
          pnpm nx show projects --help
          
          # Try the affected command with pnpm
          AFFECTED_PROJECTS=$(pnpm nx show projects --affected --plain)
          echo "Raw affected projects output: '$AFFECTED_PROJECTS'"
          
          # Convert newlines to spaces and then to commas for GitHub Actions output
          AFFECTED_PROJECTS_COMMA=$(echo "$AFFECTED_PROJECTS" | tr '\n' ' ' | sed 's/ *$//' | sed 's/ /,/g')
          echo "Comma-separated projects: '$AFFECTED_PROJECTS_COMMA'"
          
          if [[ "$AFFECTED_PROJECTS" == *"vendemas-landing-web"* ]]; then
            echo "affected=true" >> $GITHUB_OUTPUT
            echo "projects=$AFFECTED_PROJECTS_COMMA" >> $GITHUB_OUTPUT
            echo "‚úÖ vendemas-landing-web is affected"
            echo "Affected projects: $AFFECTED_PROJECTS"
          else
            echo "affected=false" >> $GITHUB_OUTPUT
            echo "projects=$AFFECTED_PROJECTS_COMMA" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è vendemas-landing-web is not affected, skipping pipeline"
            echo "Affected projects: $AFFECTED_PROJECTS"
          fi

  # =============================================================================
  # BUILD & TEST
  # =============================================================================
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.affected == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: |
            .nx/cache
            .nx/workspace-data
          key: nx-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Lint vendemas-landing-web
        run: npx nx run vendemas-landing-web:lint

      - name: Build vendemas-landing-web
        run: npx nx run vendemas-landing-web:build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # =============================================================================
  # PREPARE FOR VERCEL DEPLOYMENT
  # =============================================================================
  prepare-vercel:
    name: Prepare for Vercel
    runs-on: ubuntu-latest
    needs: build-and-test
    if: needs.build-and-test.result == 'success'
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Prepare Vercel build structure
        run: |
          echo "üîß Preparing Vercel build structure..."
          
          # Copy routes-manifest.json to the root of the output directory
          if [ -f "dist/vendemas-landing-web/.next/routes-manifest.json" ]; then
            cp dist/vendemas-landing-web/.next/routes-manifest.json dist/vendemas-landing-web/
            echo "‚úÖ Copied routes-manifest.json to output root"
          else
            echo "‚ùå routes-manifest.json not found in .next directory"
            exit 1
          fi
          
          # Ensure public directory is in the right place
          if [ -d "dist/vendemas-landing-web/public" ]; then
            echo "‚úÖ Public directory found"
          else
            echo "‚ùå Public directory not found"
            exit 1
          fi
          
          echo "‚úÖ Vercel build structure prepared successfully!"

      - name: Upload Vercel-ready artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vercel-artifacts
          path: dist/
          retention-days: 7

  # =============================================================================
  # DEPLOY TO VERCEL
  # =============================================================================
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [setup, build-and-test, prepare-vercel]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/ci-cd') && needs.build-and-test.result == 'success'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download Vercel-ready artifacts
        uses: actions/download-artifact@v4
        with:
          name: vercel-artifacts
          path: dist/

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel
        id: deploy
        run: |
          vercel --token ${{ env.VERCEL_TOKEN }} --prod --yes
        env:
          VERCEL_TOKEN: ${{ env.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ env.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID }}

      - name: Comment deployment URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Deployment successful!**\n\n**Production URL:** ${{ steps.deploy.outputs.url }}\n\n**Preview URL:** ${{ steps.deploy.outputs.preview-url }}`
            })
