name: VendeMás Landing Web - CI/CD Pipeline (Fixed Deployment)

on:
  push:
    branches: [main, feature/*] # Triggers on main and all feature branches
    paths:
      - 'apps/vendemas-landing-web/**'
      - 'libs/vendemas-shared-design/**'
      - 'libs/vendemas-shared-styles/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'nx.json'
      - 'vitest.config.ts'
      - 'vitest.setup.ts'
      - '.github/workflows/vendemas-landing-web-ci.yml'
  pull_request:
    branches: [main, feature/*]
    paths:
      - 'apps/vendemas-landing-web/**'
      - 'libs/vendemas-shared-design/**'
      - 'libs/vendemas-shared-styles/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'nx.json'
      - 'vitest.config.ts'
      - 'vitest.setup.ts'
      - '.github/workflows/vendemas-landing-web-ci.yml'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  # =============================================================================
  # SETUP & AFFECTED DETECTION
  # =============================================================================
  setup:
    name: Setup & Affected Detection
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.check-affected.outputs.affected }}
      affected-projects: ${{ steps.check-affected.outputs.projects }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: |
            .nx/cache
            .nx/workspace-data
          key: nx-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Set Nx affected projects
        id: affected
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: main

      - name: Check if vendemas-landing-web is affected
        id: check-affected
        run: |
          AFFECTED_PROJECTS=$(npx nx show projects --affected --plain)
          # Convert newlines to spaces and then to commas for GitHub Actions output
          AFFECTED_PROJECTS_COMMA=$(echo "$AFFECTED_PROJECTS" | tr '\n' ' ' | sed 's/ *$//' | sed 's/ /,/g')
          if [[ "$AFFECTED_PROJECTS" == *"vendemas-landing-web"* ]]; then
            echo "affected=true" >> $GITHUB_OUTPUT
            echo "projects=$AFFECTED_PROJECTS_COMMA" >> $GITHUB_OUTPUT
            echo "✅ vendemas-landing-web is affected"
            echo "Affected projects: $AFFECTED_PROJECTS"
          else
            echo "affected=false" >> $GITHUB_OUTPUT
            echo "projects=$AFFECTED_PROJECTS_COMMA" >> $GITHUB_OUTPUT
            echo "⏭️ vendemas-landing-web is not affected, skipping pipeline"
            echo "Affected projects: $AFFECTED_PROJECTS"
          fi

  # =============================================================================
  # LINT (PARALLEL)
  # =============================================================================
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.affected == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: |
            .nx/cache
            .nx/workspace-data
          key: nx-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Lint vendemas-landing-web
        run: npx nx run vendemas-landing-web:lint

  # =============================================================================
  # TEST (PARALLEL)
  # =============================================================================
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.affected == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: |
            .nx/cache
            .nx/workspace-data
          key: nx-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Test vendemas-landing-web
        run: npx nx run vendemas-landing-web:test

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: test-coverage
          path: coverage/
          retention-days: 30

  # =============================================================================
  # BUILD (SEQUENTIAL - AFTER LINT & TEST)
  # =============================================================================
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [setup, lint, test]
    if: needs.setup.outputs.affected == 'true' && needs.lint.result == 'success' && needs.test.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: |
            .nx/cache
            .nx/workspace-data
          key: nx-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Build vendemas-landing-web
        run: npx nx run vendemas-landing-web:build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # =============================================================================
  # DEPLOY TO VERCEL (SEQUENTIAL - AFTER BUILD)
  # =============================================================================
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.build.result == 'success'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Prepare for Vercel
        run: |
          echo "🔧 Preparing for Vercel deployment..."

          # Create a package-lock.json for npm compatibility
          echo "📦 Creating package-lock.json for Vercel compatibility..."
          cd apps/vendemas-landing-web

          # Copy package.json and create a clean npm setup
          cp package.json package.json.backup

          # Install dependencies with npm to create package-lock.json
          npm install --package-lock-only

          # Check what's in the app directory
          echo "📁 Available files in apps/vendemas-landing-web/:"
          ls -la

          # Ensure we have the necessary files
          if [ ! -f "package.json" ]; then
            echo "❌ package.json not found in app directory"
            exit 1
          fi

          if [ ! -d "src" ]; then
            echo "❌ src directory not found in app directory"
            exit 1
          fi

          echo "✅ App directory structure looks good"

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel
        id: deploy
        run: |
          # Deploy using Vercel's build process
          echo "🚀 Starting Vercel deployment..."

          # Change to the app directory
          cd apps/vendemas-landing-web

          # Use production deployment for main branch, preview for feature branches
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "📦 Deploying to production..."
            DEPLOYMENT_OUTPUT=$(vercel --token ${{ env.VERCEL_TOKEN }} --prod --yes 2>&1)
          else
            echo "🔍 Deploying preview for feature branch..."
            DEPLOYMENT_OUTPUT=$(vercel --token ${{ env.VERCEL_TOKEN }} --yes 2>&1)
          fi

          echo "📄 Vercel deployment output:"
          echo "$DEPLOYMENT_OUTPUT"

          # Extract URL from the output using regex (since --json is not supported)
          DEPLOYMENT_URL=$(echo "$DEPLOYMENT_OUTPUT" | grep -o 'https://[^[:space:]]*\.vercel\.app' | head -1)

          # Alternative extraction methods if the first one fails
          if [ -z "$DEPLOYMENT_URL" ]; then
            echo "⚠️ First extraction method failed, trying alternative..."
            DEPLOYMENT_URL=$(echo "$DEPLOYMENT_OUTPUT" | grep -o 'https://[^[:space:]]*' | grep -v 'vercel.com' | head -1)
          fi

          # Try to extract from any URL pattern
          if [ -z "$DEPLOYMENT_URL" ]; then
            echo "⚠️ Alternative extraction failed, trying broader pattern..."
            DEPLOYMENT_URL=$(echo "$DEPLOYMENT_OUTPUT" | grep -oE 'https?://[^[:space:]]+' | head -1)
          fi

          if [ -n "$DEPLOYMENT_URL" ] && [ "$DEPLOYMENT_URL" != "null" ]; then
            echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
            echo "preview-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
            echo "✅ Deployment URL: $DEPLOYMENT_URL"
          else
            echo "❌ Failed to extract deployment URL"
            echo "📄 Full output for debugging:"
            echo "$DEPLOYMENT_OUTPUT"
            echo "url=" >> $GITHUB_OUTPUT
            echo "preview-url=" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          VERCEL_TOKEN: ${{ env.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ env.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID }}

      - name: Test Deployment with Bypass Token
        run: |
          echo "🧪 Testing deployment accessibility with bypass token..."
          DEPLOYMENT_URL="${{ steps.deploy.outputs.url }}"

          if [ -z "$DEPLOYMENT_URL" ]; then
            echo "❌ Deployment URL is empty, cannot test deployment"
            exit 1
          fi

          echo "🔗 Testing URL: $DEPLOYMENT_URL"

          if [ -n "${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}" ]; then
            # Test with bypass token
            curl -f -H "x-vercel-protection-bypass: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}" "$DEPLOYMENT_URL" || {
              echo "❌ Deployment test failed with bypass token"
              exit 1
            }
            echo "✅ Deployment accessible with bypass token"
          else
            echo "⚠️ VERCEL_AUTOMATION_BYPASS_SECRET not configured, skipping bypass test"
            # Test without bypass token (should return 401 if protection is enabled)
            curl -f "$DEPLOYMENT_URL" || {
              echo "ℹ️ Deployment requires authentication (expected if protection is enabled)"
            }
          fi

      - name: Comment deployment URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Deployment successful!**\n\n**Production URL:** ${{ steps.deploy.outputs.url }}\n\n**Preview URL:** ${{ steps.deploy.outputs.preview-url }}`
            })
